{"version":3,"sources":["components/common/menu.js","components/english/engDefUi.js","components/english/shortInfo.js","components/english/engDict.js","components/common/dataInput.js","components/common/dictionary.js","App.js","serviceWorker.js","index.js"],"names":["Menu","className","EngDefUi","data","Object","keys","map","e","ind","key","style","paddingLeft","i","definition","word","React","useState","name","sound","wordInfo","setWordInfo","options","url","headers","useEffect","Axios","then","res","pronunciation","all","margin","textTransform","fontWeight","fontFamily","marginRight","EngDict","def","setDef","method","temp","defArr","arr","forEach","indexOf","partOfSpeech","push","console","log","toUpperCase","splitObject","ele","filter","filterPoSpeech","definitions","DataInput","props","value","setValue","onSubmit","Event","preventDefault","getVal","type","onChange","target","id","Dictionary","setWord","val","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f1c43250.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Menu() {\r\n  return (\r\n    <div className=\"container-fluid menu-container d-flex justify-content-center align-items-center position-fixed\">\r\n      <div className=\"menu-title\">Shobdartho</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function EngDefUi({ data }) {\r\n  return (\r\n    <div>\r\n      {Object.keys(data).map((e, ind) => (\r\n        <div key={ind}>\r\n          <h4>{e}</h4>\r\n          <ol style={{ paddingLeft: \"0px\" }}>\r\n            {data[e].map((e, i) => (\r\n              <li key={i}>{e.definition}</li>\r\n            ))}\r\n          </ol>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nexport default ({ word }) => {\r\n  let [wordInfo, setWordInfo] = React.useState({ name: \"\", sound: \"\" });\r\n\r\n  let options = {\r\n    url: `https://wordsapiv1.p.rapidapi.com/words/${word}/pronunciation`,\r\n    headers: {\r\n      \"x-rapidapi-key\": \"faab4b4011mshf0e7bc0307e81aap1f8b81jsn8e7e870114ee\",\r\n    },\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    word !== \"\" &&\r\n      Axios(options).then((res) => {\r\n        setWordInfo({ name: word, sound: `| ${res.data.pronunciation.all} |` });\r\n      });\r\n  }, [word]);\r\n\r\n  return (\r\n    <div style={{ margin: \"15px 0px\" }}>\r\n      <span\r\n        style={{\r\n          textTransform: \"capitalize\",\r\n          fontWeight: \"bold\",\r\n          fontFamily: \"lucida Sans, sans-serif\",\r\n          marginRight: 20,\r\n        }}\r\n      >\r\n        {wordInfo.name}\r\n      </span>\r\n      <span>{wordInfo.sound}</span>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nimport EngDefUi from \"./engDefUi\";\r\nimport ShortInfo from \"./shortInfo\";\r\n\r\nexport default function EngDict({ word }) {\r\n  let [def, setDef] = useState([]);\r\n\r\n  function filterPoSpeech(defArr) {\r\n    let arr = [];\r\n    defArr.forEach((e) => {\r\n      arr.indexOf(e.partOfSpeech) === -1 &&\r\n        (e.partOfSpeech !== null\r\n          ? arr.push(e.partOfSpeech)\r\n          : console.log(\r\n              `null part of speech found. def: ${e.definition.toUpperCase()}`\r\n            ));\r\n    });\r\n    let splitObject = {};\r\n    for (let ele of arr) {\r\n      splitObject[ele] = defArr.filter((e) => e.partOfSpeech === ele);\r\n    }\r\n    return splitObject;\r\n  }\r\n\r\n  useEffect(() => {\r\n    word !== \"\" &&\r\n      Axios({\r\n        headers: {\r\n          \"x-rapidapi-key\":\r\n            \"faab4b4011mshf0e7bc0307e81aap1f8b81jsn8e7e870114ee\",\r\n        },\r\n        method: \"GET\",\r\n        url: `https://wordsapiv1.p.rapidapi.com/words/${word}/definitions`,\r\n      }).then((res) => {\r\n        const temp = filterPoSpeech(res.data.definitions);\r\n        setDef(temp);\r\n      });\r\n  }, [word]);\r\n\r\n  return (\r\n    <div className=\"engdict-main row position-relative bg-white justify-content-center\">\r\n      <div className=\"col-10 col-sm-8 col-md-7 col-lg-6 col-xl-5\">\r\n        <ShortInfo word={word} />\r\n        <EngDefUi data={def} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function DataInput(props) {\r\n  let [value, setValue] = React.useState(\"\");\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    props.getVal(value);\r\n  }\r\n  return (\r\n    <div className=\"container-fluid position-fixed bg-white data-input d-flex justify-content-center align-items-center\">\r\n      <form\r\n        className=\"form row justify-content-center search-input-form\"\r\n        onSubmit={(Event) => handleSubmit(Event)}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={(Event) => setValue(Event.target.value)}\r\n          className=\"form-control col-10 col-sm-8 col-md-7 col-lg-6 col-xl-5\"\r\n          id=\"search-box\"\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport Menu from \"./menu\";\r\nimport EngDict from \"../english/engDict\";\r\nimport DataInput from \"./dataInput\";\r\n\r\nexport default function Dictionary() {\r\n  let [word, setWord] = useState(\"\");\r\n  return (\r\n    <div className=\"dictionary d-flex flex-column align-items-center\">\r\n      <Menu />\r\n      <DataInput getVal={(val) => setWord(val)} />\r\n      <EngDict word={word} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\n\nimport \"./App.scss\";\nimport Dictionary from \"./components/common/dictionary\";\n\nexport default function App() {\n  return <Dictionary />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"jquery\";\nimport \"popper.js\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}