{"version":3,"sources":["components/dictionary.module.css","components/menu.js","components/engDict.js","components/dictionary.js","App.js","serviceWorker.js","index.js","components/menu.module.css"],"names":["module","exports","Menu","className","styles","menu","name","EngDict","props","useState","engDef","setEngDef","useEffect","value","axios","get","then","res","data","meta","shortdef","catch","err","console","log","map","item","index","key","style","listStyle","marginBottom","fontSize","fontFamily","Dictionary","setValue","main","inputDiv","type","onKeyUp","Event","event","keyCode","target","defDiv","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uLACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,SAAW,6BAA6B,OAAS,6B,oHCMpF,SAASC,IACpB,OACI,yBAAKC,UAAWC,IAAOC,MACnB,yBAAKF,UAAWC,IAAOE,MAAvB,W,2BCPG,SAASC,EAAQC,GAAQ,IAAD,EAEVC,mBAAS,IAFC,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAsBnC,OAlBAC,qBAAU,WACW,KAAdJ,EAAMK,OACLC,IAAMC,IAAN,+DAAkEP,EAAMK,MAAxE,8CACCG,MAAK,SAAAC,GACCA,EAAIC,KAAK,GAAGC,KACXR,EAAUM,EAAIC,KAAK,GAAGE,UAEA,kBAAXH,EAAIC,KACfP,EAAUM,EAAIC,MAEbP,EAAU,yCAElBU,OAAM,SAACC,GACJC,QAAQC,IAAIF,QAGtB,CAACd,EAAMK,QAGL,6BAEMH,EAAOe,KAAI,SAACC,EAAKC,GAAN,OACL,wBAAIC,IAAKD,EAAM,EAAGE,MAAO,CAACC,UAAU,OAAOC,aAAa,OAAQC,SAAS,OAC7CC,WAAW,UAClCN,EAAM,EAFX,KAEgBD,O,oBCtBrB,SAASQ,IAAc,IAAD,EAEVzB,mBAAS,IAFC,mBAE5BI,EAF4B,KAEtBsB,EAFsB,KAUjC,OACI,yBAAKhC,UAAWC,IAAOgC,MACnB,yBAAKjC,UAAWC,IAAOiC,UACnB,2BAAOC,KAAK,OAAOT,MAAO,CAACG,SAAS,IAAKO,QAAS,SAACC,GAT/D,IAAsBC,EACE,MADFA,EAS8DD,GARtEE,SACNP,EAASM,EAAME,OAAO9B,WAStB,yBAAKV,UAAWC,IAAOwC,QACnB,kBAACrC,EAAD,CAASM,MAAOA,MClBjB,SAASgC,IACtB,OACE,kBAAC,IAAD,KACG,kBAAC3C,EAAD,MACA,kBAAC,IAAD,CAAO4C,KAAK,IAAIC,UAAWb,KCCdc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdzC,OAAM,SAAA0C,GACLxC,QAAQwC,MAAMA,EAAMC,a,kBExI5BhE,EAAOC,QAAU,CAAC,KAAO,sB","file":"static/js/main.be60c5e7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"dictionary_main__2vrc2\",\"inputDiv\":\"dictionary_inputDiv__3H7ze\",\"defDiv\":\"dictionary_defDiv__1p6AH\"};","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nimport styles from './menu.module.css'\r\nimport BurgerIcon from '../assets/icons/burgerIcon'\r\n\r\n\r\nexport default function Menu() {\r\n    return (\r\n        <div className={styles.menu}>\r\n            <div className={styles.name}>Shobdo</div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState,useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\nexport default function EngDict(props) {\r\n    \r\n    let [engDef,setEngDef] = useState([])\r\n    \r\n    useEffect(()=>{        \r\n        if(props.value!==''){\r\n            axios.get(`https://dictionaryapi.com/api/v3/references/sd4/json/${props.value}?key=5718a61a-2c4a-4afe-b4d7-535445f8da45`)\r\n            .then(res=>{                \r\n                if(res.data[0].meta){                                    \r\n                    setEngDef(res.data[0].shortdef)               \r\n                }               \r\n                else if(typeof res.data===\"object\"){\r\n                    setEngDef(res.data)\r\n                }                    \r\n                else setEngDef('Sorry. Invalid or misspelled word.')\r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n            })        \r\n        }\r\n    },[props.value])\r\n\r\n    return(\r\n        <div>\r\n            {\r\n              engDef.map((item,index)=>(\r\n                    <li key={index+1} style={{listStyle:'none',marginBottom:'10px', fontSize:'20px',\r\n                                                fontFamily:'comic'}}>\r\n                        {index+1}. {item}\r\n                    </li>\r\n              ))\r\n            }\r\n        </div>\r\n    )    \r\n}\r\n","import React,{useState} from 'react'\r\n\r\nimport EngDict from './engDict'\r\nimport BngDict from './bngDict'\r\n\r\n\r\nimport  styles from './dictionary.module.css'\r\n\r\n\r\nexport default function Dictionary() {\r\n\r\n    let [value,setValue] = useState('')        \r\n          \r\n    function handleSubmit(event){   \r\n         if(event.keyCode===13){                        \r\n            setValue(event.target.value)                                            \r\n        }           \r\n    }\r\n\r\n    return (\r\n        <div className={styles.main}>                        \r\n            <div className={styles.inputDiv}>\r\n                <input type=\"text\" style={{fontSize:18}} onKeyUp={(Event)=>handleSubmit(Event)}/>                \r\n            </div>            \r\n            <div className={styles.defDiv}>\r\n                <EngDict value={value}/>\r\n            </div>                              \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport {MemoryRouter,Route} from 'react-router-dom'\n\nimport './App.css';\nimport Menu from './components/menu'\nimport Dictionary from './components/dictionary'\n\nexport default function App() {\n  return (\n    <MemoryRouter>\n       <Menu/>             \n       <Route path=\"/\" component={Dictionary}/>          \n    </MemoryRouter>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"menu_menu__wGgmL\"};"],"sourceRoot":""}